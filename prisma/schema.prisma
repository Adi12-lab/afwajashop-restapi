// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id       String     @id @default(uuid())
  email    String     @unique
  password String
  role     Role       @default(USER)
  isActive Boolean    @default(true) @map("is_active")
  profile  Profile?
  address  Address[]
  cart     Cart[]
  favorite Favorite[]
  order    Order[]

  @@map(name: "users")
}

enum Gender {
  MALE
  FEMALE
}

model Profile {
  id     Int    @id @default(autoincrement())
  userId String @unique @map("user_id") @db.Char(36)
  user   User   @relation(fields: [userId], references: [id])
  name   String @db.VarChar(100)
  image  String @db.VarChar(150)
  phone  String @db.VarChar(13)
  age    Int
  gender Gender

  @@map(name: "profiles")
}

model Province {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(191)
  city    City[]
  address Address[]
  product Product[]

  @@map(name: "provinces")
}

model City {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(191)
  postalCode  String        @map("postal_code")
  provinceId  Int           @map("province_id")
  province    Province      @relation(fields: [provinceId], references: [id])
  subDistrict SubDistrict[]
  address     Address[]
  product     Product[]

  @@map(name: "cities")
}

model SubDistrict {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(191)
  cityId  Int       @map("city_id")
  city    City      @relation(fields: [cityId], references: [id])
  address Address[]
  product Product[]

  @@map(name: "sub_districts")
}

model Address {
  id            Int         @id @default(autoincrement())
  userId        String      @map("user_id") @db.Char(36)
  user          User        @relation(fields: [userId], references: [id])
  address       String
  provinceId    Int         @map("province_id")
  province      Province    @relation(fields: [provinceId], references: [id])
  cityId        Int         @map("city_id")
  city          City        @relation(fields: [cityId], references: [id])
  subDistrictId Int         @map("subdistrict_id")
  subdistrict   SubDistrict @relation(fields: [subDistrictId], references: [id])
  createdAt     DateTime    @default(now()) @map("created_at")

  @@map(name: "address")
}

model Banner {
  id       Int     @id @default(autoincrement())
  image    String  @db.VarChar(50)
  isActive Boolean @map("is_active")
  link     String  @db.VarChar(255)
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(50)
  isActive Boolean   @map("is_active")
  image    String    @db.VarChar(50)
  product  Product[]

  @@map(name: "categories")
}

model Product {
  id              String            @id @default(cuid())
  name            String            @db.VarChar(50)
  slug            String            @unique @db.VarChar(15)
  isActive        Boolean           @map("is_active")
  isFeatured      Boolean           @map("is_featured")
  isNew           Boolean           @map("is_new")
  description     String
  excerpt         String
  categoryId      Int               @map("category_id")
  category        Category          @relation(fields: [categoryId], references: [id])
  provinceId      Int               @map("province_id")
  province        Province          @relation(fields: [provinceId], references: [id])
  cityId          Int               @map("city_id")
  city            City              @relation(fields: [cityId], references: [id])
  subDistrictId   Int               @map("subdistrict_id")
  subdistrict     SubDistrict       @relation(fields: [subDistrictId], references: [id])
  productImages   ProductImages[]
  productVariants ProductVariants[]
  cart            Cart[]
  favorite        Favorite[]

  @@map(name: "products")
}

model ProductVariants {
  id        Int     @id @default(autoincrement())
  name      String? @db.VarChar(25)
  size      String? @db.VarChar(10)
  stock     Int
  price     Int
  oldPrice  Int
  productId String  @db.VarChar(30) @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart      Cart[]

  @@map(name: "product_variants")
}

model ProductImages {
  id        Int     @id @default(autoincrement())
  image     String  @db.VarChar(200)
  productId String  @db.VarChar(30) @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map(name: "product_images")
}

model Cart {
  id               String          @id @default(cuid())
  userId           String          @map("user_id") @db.Char(36)
  user             User            @relation(fields: [userId], references: [id])
  productId        String          @map("product_id") @db.VarChar(30)
  product          Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariantId Int             @map("product_variant_id")
  productVariant   ProductVariants @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  quantity         Int

  @@map(name: "carts")
}

model Favorite {
  id        String  @id @default(cuid())
  userId    String  @map("user_id") @db.Char(36)
  user      User    @relation(fields: [userId], references: [id])
  productId String  @db.VarChar(30) @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map(name: "favorites")
}

model Order {
  id           String      @id @default(cuid())
  amount       Int
  gross_amount Int
  resi         String      @db.VarChar(50)
  status       OrderStatus
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @default(now()) @updatedAt @map("updated_at")
  userId       String      @map("user_id") @db.Char(36)
  user         User        @relation(fields: [userId], references: [id])
}

enum OrderStatus {
  cancel //dibatalkan
  pending //
  expire
  success
}
